var app = angular.module("csChatApp.controllers", ['ngTouch', 'nya.bootstrap.select']);

app.directive('fileModel', ['$parse', function ($parse) {
    return {
        restrict: 'A',
        link: function (scope, element, attrs) {
            var model = $parse(attrs.fileModel);
            var modelSetter = model.assign;

            element.bind('change', function () {
                scope.$apply(function () {
                    modelSetter(scope, element[0].files[0]);
                    scope.onFileSelected(scope);
                });
            });
        }
    };
}]);

app.directive('datepicker', function () {
    return {
        restrict: 'A',
        require: 'ngModel',
        compile: function () {
            return {
                pre: function (scope, element, attrs, ngModelCtrl) {
                    var format, dateObj;
                    format = (!attrs.dpFormat) ? 'yyyy/mm/dd' : attrs.dpFormat;
                    if (!attrs.initDate && !attrs.dpFormat) {
                        // If there is no initDate attribute than we will get todays date as the default
                        dateObj = new Date();
                        scope[attrs.ngModel] = dateObj.getDate() + '/' + (dateObj.getMonth() + 1) + '/' + dateObj.getFullYear();
                    } else if (!attrs.initDate) {
                        // Otherwise set as the init date
                        scope[attrs.ngModel] = attrs.initDate;
                    } else {
                        // I could put some complex logic that changes the order of the date string I
                        // create from the dateObj based on the format, but I'll leave that for now
                        // Or I could switch case and limit the types of formats...
                    }
                    // Initialize the date-picker
                    $(element).datepicker({
                        format: format
                    }).on('changeDate', function (ev) {
                        // To me this looks cleaner than adding $apply(); after everything.
                        scope.$apply(function () {
                            scope.preventCloseDiv = true;
                            ngModelCtrl.$setViewValue(moment(ev.date).format(format.toUpperCase()));
                        });
                    }).on('show', function () {
                        $('input').blur();
                    });
                }
            }
        }
    }
});

app.controller("AppController", ['$scope', '$http', '$location', 'DomainService', '$window', '$sce', 'TranslateService', '$filter',
    function ($scope, $http, $location, DomainService, $window, $sce, TranslateService, $filter) {
        $scope.$window = $window;
        //var webPush = new WebPush();

        webPush.onConnected = function () {
            console.log('socket connected');
            $scope.disconnectChat = false;
            $scope.connecting = false;
            $scope.$digest();
        }

        webPush.onDisconnected = function () {
            $scope.disconnectChat = true;
            $scope.connecting = false;
            $scope.$digest();
        }
        var parentUsername = "";
        var parentEmail = "";
        var parentPhone = "";
        var isAuto = true;
        var hidePopup = false;
        var pageTitle = "";
        var referrer = "";
        var isSynced = false; //check xem da sync voi localstorage chua, case bat 2 tab xong chat tu 1 tab len
        var domainId = ""; //check xem da sync voi localstorage chua, case bat 2 tab xong chat tu 1 tab len
        var checkStatTmrDuration = CHECK_AGENT_STATUS_TIMEOUT;

        $scope.isDisable = {
            username: false,
            email: false,
            phone: false
        }

        //Set gia tri default
        $scope.backgroundColor = "transparent";
        $scope.offTitle = $filter('translate')('LBL_LEAVE_MESSAGE');
        $scope.onTitle = $filter('translate')('LBL_CHAT_US');
        $scope.agentNameDefault = $filter('translate')('LBL_AGENT_DEFAULT');
        $scope.agentDescriptionDefault = $filter('translate')('LBL_DESCRIPTION_DEFAULT');
        $scope.agentAvatarDefault = "https://3c-web.mobifone.vn:8090/images/avatar_simple_agent.png";
        $scope.offlineInfo = $filter('translate')('LBL_OFFLINE_INFO');
        $scope.offlineSuccess = $filter('translate')('LBL_OFFLINE_SUCCESS');
        $scope.agentBusyDefault = $filter('translate')('LBL_NO_AGENT_AVAILABLE');
        //Thong bao
        //        $scope.homepage = "https://caresoft.vn";
        $scope.homepage = "#";
        $scope.titleLogo = "Powered by Mobifone";
        $scope.logo = "images/cs.png";
        $scope.newMessage = 0;


        //service type: chat/offline message/survey
        $scope.chat = false;
        $scope.message = false;
        $scope.survey = false;
        $scope.myFile = "";
        $scope.preventCloseDiv = false;

        //show/hide
        $scope.maximize = false;
        $scope.isChatting = false;
        $scope.isRating = false;
        $scope.sentNotify = false;
        $scope.allowRating = false;
        $scope.isSignin = false;
        $scope.isClickSignin = false;
        $scope.isEditInfo = false;
        $scope.isClickOption = false;
        $scope.isConfirmEnd = false;
        $scope.requiredName = false;
        $scope.requiredEmail = false;
        $scope.requiredPhone = false;
        $scope.requiredContent = false;
        $scope.requireService = false;
        $scope.invalidEmail = false;
        $scope.invalidPhone = false;
        $scope.disconnectChat = true;
        $scope.connecting = true;
        $scope.uploading = false;
        $scope.isOffline = false;
        $scope.enableEmail = true;
        $scope.requireEmail = true;
        $scope.enablePhone = false;
        $scope.requirePhone = false;
        $scope.sendOfflineError = false;
        $scope.isSendOffline = false;
        $scope.loggedinFirstTime = false;
        $scope.isCustomerChatting = false;

        //Info
        $scope.agentName = $scope.agentNameDefault;
        $scope.agentDescription = $scope.agentDescriptionDefault;
        $scope.avatar = $scope.agentAvatarDefault;
        $scope.needSignin = false;
        $scope.listService = [];
        $scope.chatMessage = {};
        $scope.listMessage = [];
        $scope.listHistory = [];
        $scope.visitorName = "";
        $scope.visitorEmail = "";
        $scope.surveyVisitorName = "";
        $scope.isLike = false;
        $scope.isDislike = false;
        $scope.listServiceStr = "";
        $scope.isMobile = false;
        $scope.isTypingChat = false;
        $scope.isTyping = false;
        $scope.isKeyPress = false;
        var delayTimeout = null;
        var isClearTimeout = false;
        var autoLoginTimeout = false;

        $scope.isAutoPopupRequire = false;
        $scope.isParentFocused = false;
        $scope.chatState = null;

        $scope.isChangeUserInfo = false;
        $scope.userOpenChatBoxManually = false;
        $scope.lstAdditionField = [];

        $scope.userInfo = new UserInfo();
        $scope.commentMessage = new Comment();
        $scope.login = new LoginUser();
        $scope.visitorInfo = new VisitorInfo();
        $scope.currentResumeState = 0;
        $scope.tmroutCheckAgentStat = null;
        var userIp = '';
        var city = '';

        var messageAudio = new Audio("../images/triad_gbd.mp3");
        var isTouchEvent = 'ontouchstart' in window;

        //        var newMessageNotification;
        var timeoutTyping;
        var triggerIntvl = [];


        getQueryString();
        setLandingTime();

        function syncStorage(domainId) { // get chatstate from outside for device that blocked cross domain storage
            var data = {
                id: 6,
                type: 'syncStorage',
                value: {
                    chatState: "chatState_" + domainId,
                    deviceKey: "chatState_devicekey_" + domainId
                }
            };
            parent.postMessage(JSON.stringify(data), "*");
        }

        $scope.openChatBox = function (isOpenManually) {
            isClearTimeout = true;
            //var chatState = JSON.parse(localStorage.getItem("chatState_" + $scope.domainId));
            //if ($scope.chatState.conversation_id != chatState.conversation_id && chatState.conversation_id != -1) {
            //    $scope.chatState = chatState;
            //    restoreChatState();
            //    return;
            //}
            if (isOpenManually) {
                $scope.userOpenChatBoxManually = true;  // Check xem chat box duoc bat bang tay hay bang code
            }
            if ($scope.useFacebook) {
                popupCenter("https://www.messenger.com/t/" + $scope.pageId, "Chat Facebook");
            } else {
                notifyNewMessage("openChatBox");
                $scope.maximize = true;
                $scope.newMessage = 0;
                $scope.chatState.chat_windows_maximum = true;
                saveChatStateToStorage();
                requestFirstLogin();
                if (autoLoginTimeout) {
                    clearTimeout(autoLoginTimeout);
                }
                $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
            }
        }

        function popupCenter(url, title) {
            var newWindow = window.open(url, title);
            if (window.focus) {
                newWindow.focus();
            }
        }

        $scope.closeChatBox = function () {
            isClearTimeout = true;
            $scope.chatState.chat_windows_maximum = false;
            $scope.maximize = false;
            $scope.userOpenChatBoxManually = false;
            if (hidePopup) {
                if ($scope.isChatting) {
                    notifyNewMessage("closeChatBox");
                } else {
                    notifyNewMessage("closeChatBoxHide");
                }
            } else {
                notifyNewMessage("closeChatBox");
            }
            saveChatStateToStorage();
        }

        $scope.changeSound = function () {
            $scope.chatState.enableSound = !$scope.chatState.enableSound;
            saveChatStateToStorage();
        }
        $scope.sendLandingInfo = function (conversationId) {
            var source = JSON.parse(getCookie("chatState_sourceUrl_" + $scope.domainId));
            if (!source.isSentBefore) {
                source.isSentBefore = true;
                setCookie("chatState_sourceUrl_" + $scope.domainId, JSON.stringify(source));
                source.conversationId = conversationId;
                send(CUSTOMER_UPDATE_SOURCEURL, source);
            }
        }
        $scope.changeLandingSendState = function (state) {
            var source = JSON.parse(getCookie("chatState_sourceUrl_" + $scope.domainId));
            source.isSentBefore = state;
            setCookie("chatState_sourceUrl_" + $scope.domainId, JSON.stringify(source));
        }

        $scope.startTyping = function () {
            $scope.isTypingChat = true;
        }

        $scope.stopTyping = function () {
            $scope.isTypingChat = false;
        }

        $scope.startChat = function () {
            var name = $scope.login.username == null ? "" : $scope.login.username.trim();
            var email = $scope.login.email == null ? "" : $scope.login.email.trim();
            var phone = $scope.login.phone == null ? "" : $scope.login.phone.trim();
            if (($scope.login.selectedService == null || angular.equals($scope.login.selectedService, {})) && $scope.listService.length == 1) {
                $scope.login.selectedService = $scope.listService[0];
            }
            var service = $scope.login.selectedService;

            var content = $scope.login.content;

            $scope.validateUser(name, email, phone);
            var afValid = $scope.login.validateAdditionFields($scope.lstAdditionField);


            if (content == "") {
                $scope.requiredContent = true;
            } else {
                $scope.requiredContent = false;
            }

            if (service.serviceId == -1) {
                $scope.requireService = true;
            } else {
                $scope.requireService = false;
            }

            if ($scope.requiredName || $scope.requiredEmail || $scope.invalidEmail || $scope.requiredPhone || $scope.invalidPhone || $scope.requiredContent || $scope.requireService || !afValid) {
                return;
            }

            //Start chat

            $scope.login.content = "";

            if (name != "") {
                $scope.chatState.visitor_name = name;
                $scope.chatState.visitor_email = email;
                $scope.chatState.visitor_phone = phone;
                $scope.chatState.setAdditionFields($scope.lstAdditionField, $scope.login);

                // $scope.visitorName = $scope.chatState.visitor_name;
                // $scope.visitorEmail = $scope.chatState.visitor_email;
                // $scope.visitorPhone = $scope.chatState.visitor_phone;
                $scope.visitorInfo.setBasicInfo($scope.chatState.visitor_name, $scope.chatState.visitor_email, $scope.chatState.visitor_phone);
                $scope.visitorInfo.setAdditionFields($scope.lstAdditionField, $scope.login);
                var infoVisitor = new InfoVisitor();
                infoVisitor.setBasicInfo(name, email, phone);
                infoVisitor.setAdditionInfo($scope.lstAdditionField, $scope.login);
                send(UPDATE_VISITOR_INFO, infoVisitor);
                $scope.isSignin = true;
            }
            var sendMessage = {
                service_id: service.serviceId,
                conversationId: $scope.chatState.conversation_id ? $scope.chatState.conversation_id : "-1",
                message: content,
                fromTrigger: $scope.chatState.replyFromTrigger,
                logging: 'Sending from Startchat'
            }
            if (sendMessage.conversationId == "-1") {
                sendMessage.lstTriggerMsg = gatherTriggerMsg($scope.chatState.history);
                $scope.isCustomerChatting = true;
            }
            $scope.chatState.chatting = true;
            send(MESSAGE, sendMessage);

            var sendMenu = {
                serviceId: service.serviceId
            }

            send(LIVECHAT_GET_PERSISTENT_MENU, sendMenu);

            $scope.chatState.service_id = service.serviceId;
            saveChatStateToStorage();

            $scope.isChatting = true;

            clearTimeout($scope.tmroutCheckAgentStat);
        }

        $scope.sendAnother = function () {
            $scope.sentNotify = false;
            $scope.login.content = "";
        }

        $scope.sendOffline = function () {
            $scope.sendOfflineError = false;
            var name = $scope.login.username == null ? "" : $scope.login.username.trim();
            var email = $scope.login.email == null ? "" : $scope.login.email.trim();
            var phone = $scope.login.phone == null ? "" : $scope.login.phone.trim();
            var content = $scope.login.content;
            var service = $scope.login.selectedService;

            $scope.validateUser(name, email, phone);
            var afValid = $scope.login.validateAdditionFields($scope.lstAdditionField);
            if (content == "") {
                $scope.requiredContent = true;
            } else {
                $scope.requiredContent = false;
            }

            if (service.serviceId == -1) {
                $scope.requireService = true;
            } else {
                $scope.requireService = false;
            }

            if ($scope.requiredName || $scope.requiredEmail || $scope.invalidEmail || $scope.requiredPhone || $scope.invalidPhone || $scope.requiredContent || $scope.requireService || !afValid) {
                return;
            }

            if (name != "") {
                $scope.isSendOffline = true;
                $scope.chatState.visitor_name = name;
                $scope.chatState.visitor_email = email;
                $scope.chatState.visitor_phone = phone;
                $scope.chatState.setAdditionFields($scope.lstAdditionField, $scope.login);

                var infoVisitor = new InfoVisitor();
                infoVisitor.setBasicInfo(name, email, phone);
                infoVisitor.setAdditionInfo($scope.lstAdditionField, $scope.login);
                $scope.visitorInfo.setBasicInfo(name, email, phone);
                // var infoVisitor = {
                //     name: name,
                //     email: email,
                //     phone: phone
                // };
                // $scope.visitorName = name;
                // $scope.visitorEmail = email;
                // $scope.visitorPhone = phone;
                send(UPDATE_VISITOR_INFO, infoVisitor);
            }

            var host = document.location.host;
            if (parent !== window) {
                host = document.referrer;
            }
            var sendMessage = {
                message: content,
                service_id: service.serviceId,
                host_name: getHostName(host),
                url: host
            }
            send(CUSTOMER_SEND_OFFLINE_MESSAGE, sendMessage);

            saveChatStateToStorage();
        }

        $scope.openOptionBox = function (e) {
            $scope.isClickOption = !$scope.isClickOption;
            $scope.isClickSignin = false;

            if ($scope.isClickOption) {
                if (!isTouchEvent) {
                    $scope.$window.onclick = function (event) {
                        closeDivWhenClickingElsewhere(event, $scope.openOptionBox, "option-menu", e);
                    };
                }
            } else {
                if (!isTouchEvent) {
                    $scope.$window.onclick = null;
                }
                if (e == undefined) {
                    $scope.$apply();
                }
            }
        }

        $scope.showUserInfoEdit = function () {
            $scope.isChangeUserInfo = true;
        }

        $scope.signout = function () {
            $scope.chatState.visitor_id = "-1";
            $scope.chatState.visitor_name = "";
            $scope.chatState.visitor_email = "";
            $scope.chatState.visitor_phone = "";

            // $scope.login.username = "";
            // $scope.login.email = "";
            // $scope.login.phone = "";
            $scope.login.setBasicInfo(null, null, null);
            // $scope.userInfo.username = "";
            // $scope.userInfo.email = "";
            // $scope.userInfo.phone = "";
            $scope.userInfo.setBasicInfo(null, null, null);
            // $scope.visitorName = "";
            // $scope.visitorEmail = "";
            // $scope.visitorPhone = "";
            $scope.visitorInfo.setBasicInfo(null, null, null);
            $scope.chatState.setDefaultAdditionFieldsValue($scope.lstAdditionField);
            $scope.login.setDefaultAdditionFieldsValue($scope.lstAdditionField)
            $scope.userInfo.setDefaultAdditionFieldsValue($scope.lstAdditionField);

            $scope.isChangeUserInfo = true;

            saveChatStateToStorage();
        }

        $scope.openEditInfo = function () {
            $scope.isClickOption = false;
            $scope.isClickSignin = true;
            $scope.isEditUserInfo = true;
            // $scope.userInfo.username = $scope.visitorName.visitorName;
            // $scope.userInfo.email = $scope.visitorName.visitorEmail;
            // $scope.userInfo.phone = $scope.visitorName.visitorPhone;
            $scope.userInfo.setBasicInfo($scope.visitorName.visitorName, $scope.visitorName.visitorName, $scope.visitorName.visitorPhone)
            $scope.requiredName = false;
            $scope.requiredEmail = false;
            $scope.requiredPhone = false;
            $scope.requiredContent = false;
            $scope.requireService = false;
            $scope.invalidEmail = false;
            $scope.invalidPhone = false;
        }

        $scope.closeEditInfo = function () {
            $scope.isEditUserInfo = false;
            $scope.isClickSignin = false;
        }

        $scope.confirmEndChat = function (e) {
            $scope.isConfirmEnd = true;
            $scope.isClickOption = false;
            if (!isTouchEvent) {
                $scope.$window.onclick = null;
            }
            $scope.commentMessage = new Comment();

            if (!isTouchEvent) {
                $scope.$window.onclick = function (event) {
                    closeDivWhenClickingElsewhere(event, function () {
                        $scope.isConfirmEnd = false;
                        $scope.$window.onclick = null;
                        $scope.$digest();
                    }, "confirm-end", e);
                };
            }

        }

        $scope.cancelEndChat = function () {
            $scope.isConfirmEnd = false;
            $scope.isClickOption = false;
            if (!isTouchEvent) {
                $scope.$window.onclick = null;
            }
        }

        $scope.submitEndChat = function () {
            $scope.isConfirmEnd = false;
            $scope.isClickOption = false;
            if (!isTouchEvent) {
                $scope.$window.onclick = null;
            }
            if ($scope.chatState.agent_name !== null) {
                $scope.isRating = true;
            } else {
                endConversation();
            }
        }

        $scope.skipRating = function () {
            endConversation();
        }

        $scope.submitRating = function () {
            if ($scope.commentMessage.content != "") {
                var comment = {
                    visitorId: $scope.chatState.visitor_id,
                    serviceId: $scope.chatState.service_id,
                    conversationId: $scope.chatState.conversation_id,
                    content: $scope.commentMessage.content
                }
                send(COMMENT, comment);
            }
            endConversation();
        }

        $scope.dislike = function () {
            var dislike = {
                visitorId: $scope.chatState.visitor_id,
                serviceId: $scope.chatState.service_id,
                conversationId: $scope.chatState.conversation_id
            }
            send(DISLIKE, dislike);
        }

        $scope.like = function () {
            var like = {
                visitorId: $scope.chatState.visitor_id,
                serviceId: $scope.chatState.service_id,
                conversationId: $scope.chatState.conversation_id
            }
            send(LIKE, like);
        }

        function endConversation() {
            var endChat = {
                visitorId: $scope.chatState.visitor_id,
                serviceId: $scope.chatState.service_id,
                conversationId: $scope.chatState.conversation_id
            }
            send(LEAVE_CONVERSATION, endChat);
            $scope.chatState.conversation_id = "-1";
            $scope.chatState.agent_name = null;
            var mes = $filter('translate')('LBL_CHAT_ENDED');
            var logChatData = new Message(null, 3, mes);
            $scope.chatState.history.push(logChatData);
            $scope.listMessage.push(logChatData);
            $scope.isLike = false;
            $scope.isDislike = false;
            $scope.chatState.isLike = false;
            $scope.chatState.isDislike = false;
            $scope.chatState.replyFromTrigger = 0;
            saveChatStateToStorage();
            $scope.isRating = false;
            $scope.allowRating = false;
            $scope.commentMessage = new Comment();
            $scope.agentName = $scope.agentNameDefault;
            $scope.agentDescription = $scope.agentDescriptionDefault;
            $scope.avatar = $scope.agentAvatarDefault;
            $scope.changeLandingSendState(false);
            $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
            clearTimeout($scope.tmroutCheckAgentStat);
            $scope.tmroutCheckAgentStat = setTimeout(function () {
                restoreChatState();
            }, checkStatTmrDuration);
        }

        $scope.openSigninBox = function (e) {
            $scope.isClickOption = false;
            $scope.isClickSignin = !$scope.isClickSignin;

            if ($scope.isClickSignin) {
                //$scope.isEditInfo = true;
                $scope.$window.onclick = function (event) {
                    closeDivWhenClickingElsewhere(event, $scope.openEditInfoBox, "sign-in-menu", e);
                };
            } else {
                //$scope.isEditInfo = false;
                $scope.$window.onclick = null;
                if (e == undefined) {
                    $scope.$apply();
                }
            }
        }

        $scope.showUserInfoEditMo = function () {
            $scope.isEditUserInfo = true;
        }

        $scope.openEditInfoBox = function (e) {
            $scope.isClickOption = false;
            $scope.isClickSignin = !$scope.isClickSignin;

            if ($scope.isClickSignin) {
                $scope.preventCloseDiv = false;
                $scope.isEditUserInfo = false;
                if ($scope.login.username == "") {
                    $scope.userInfo.username = "";
                    $scope.isEditUserInfo = true;
                    $scope.userInfo.selectedService = $scope.listService[0];
                } else {
                    $scope.userInfo.username = $scope.visitorInfo.visitorName;
                }
                if ($scope.chatState.service_id && $scope.chatState.service_id == -1) {
                    $scope.isEditUserInfo = true;
                    $scope.userInfo.selectedService = $scope.listService[0];
                } else {
                    for (var i = 0; i < $scope.listService.length; i++) {
                        if ($scope.chatState.service_id == $scope.listService[i].serviceId) {
                            $scope.userInfo.selectedService = $scope.listService[i];
                        }
                    }
                }
                $scope.userInfo.email = $scope.visitorInfo.visitorEmail;
                $scope.userInfo.phone = $scope.visitorInfo.visitorPhone;
                $scope.userInfo.setAdditionFields($scope.lstAdditionField, $scope.chatState.visitorAdditionField);
                if (!$scope.isMobile) {
                    if ($scope.preventCloseDiv) {
                        $scope.$window.onclick = function (event) {
                            closeDivWhenClickingElsewhere(event, $scope.openEditInfoBox, "sign-in-menu", e);
                        };
                    }
                }

            } else {
                //$scope.isEditInfo = false;
                $scope.$window.onclick = null;
                if (e == undefined) {
                    $scope.$apply();
                }
            }
        }

        $scope.validateInfo = function () {
            var valid = true;
            valid = $scope.login.validateAdditionFields($scope.lstAdditionField);
            if ((($scope.requirePhone && $scope.login.phone === "") || ($scope.requireEmail && $scope.login.email === "")) || $scope.chatState.service_id == -1) {
                valid = false;
            }
            return valid;
        }

        $scope.submitChat = function (event) {

            if ((event.which === 13 || event == 0) && $scope.chatMessage.content != "") {
                if (event != 0) {
                    event.preventDefault();
                }
                if ($scope.validateInfo() == false) {
                    $scope.openEditInfoBox();
                    return;
                }
                //                if (($scope.login.username == "" && ($scope.requireEmail || $scope.requirePhone)) || $scope.chatState.service_id == -1) {
                //                    $scope.openEditInfoBox();
                //                    return;
                //                }

                if ($scope.chatState.chatting == null || $scope.chatState.chatting == false) {
                    var sendMessage = {
                        service_id: $scope.chatState.service_id ? $scope.chatState.service_id : -1,
                        conversationId: $scope.chatState.conversation_id ? $scope.chatState.conversation_id : "-1",
                        message: $scope.chatMessage.content,
                        fromTrigger: $scope.chatState.replyFromTrigger,
                        logging: 'submitchat - chatting = false'
                    }
                    if (sendMessage.conversationId == "-1") {
                        sendMessage.lstTriggerMsg = gatherTriggerMsg($scope.chatState.history);
                        $scope.isCustomerChatting = true;
                    }
                    $scope.chatState.chatting = true;
                    send(MESSAGE, sendMessage);
                } else {
                    var msg = {
                        service_id: $scope.chatState.service_id,
                        conversationId: $scope.chatState.conversation_id,
                        message: $scope.chatMessage.content,
                        fromTrigger: $scope.chatState.replyFromTrigger,
                        logging: 'submitchat - chatting = true'
                    };
                    if (msg.conversationId == "-1") {
                        msg.lstTriggerMsg = gatherTriggerMsg($scope.chatState.history);
                        $scope.isCustomerChatting = true;
                    }
                    send(MESSAGE, msg);
                }

                stopNotifyTypingToCust();
                $scope.chatMessage.content = "";
                $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
                clearTimeout($scope.tmroutCheckAgentStat);

            }
            if ($scope.isKeyPress != true) {
                $scope.isKeyPress = true;
                var req = {
                    conversationId: $scope.chatState.conversation_id
                }
                send(NOTIFY_TYPING, req);
                keypressChatTimeout = setTimeout(function () {
                    stopNotifyTypingToCust();
                }, 5000);
            } else {
                clearTimeout(keypressChatTimeout);
                keypressChatTimeout = setTimeout(function () {
                    stopNotifyTypingToCust();
                }, 5000);
            }
        }
        $scope.onClickSubmitChat = function (event) {
            //            if (event != 0) {
            //                event.preventDefault();
            //            }

            $('#chat-text-area').focus();

            if ($scope.chatMessage.content == "") {
                return;
            }
            if ($scope.validateInfo() == false) {
                $scope.openEditInfoBox();
                return;
            }

            //            if (($scope.login.username == "" && ($scope.requireEmail || $scope.requirePhone)) || $scope.chatState.service_id == -1) {
            //                $scope.openEditInfoBox();
            //                return;
            //            }

            if ($scope.chatState.chatting == null || $scope.chatState.chatting == false) {
                var sendMessage = {
                    service_id: $scope.chatState.service_id ? $scope.chatState.service_id : -1,
                    conversationId: $scope.chatState.conversation_id ? $scope.chatState.conversation_id : "-1",
                    message: $scope.chatMessage.content,
                    fromTrigger: $scope.chatState.replyFromTrigger,
                    logging: 'onclicksubmitchat - chatting = false'
                }
                if (sendMessage.conversationId == "-1") {
                    sendMessage.lstTriggerMsg = gatherTriggerMsg($scope.chatState.history);
                    $scope.isCustomerChatting = true;
                }
                $scope.chatState.chatting = true;
                send(MESSAGE, sendMessage);
            } else {
                var msg = {
                    service_id: $scope.chatState.service_id,
                    conversationId: $scope.chatState.conversation_id,
                    message: $scope.chatMessage.content,
                    fromTrigger: $scope.chatState.replyFromTrigger,
                    logging: 'onclicksubmitchat - chatting = true'
                };
                if (msg.conversationId == "-1") {
                    msg.lstTriggerMsg = gatherTriggerMsg($scope.chatState.history);
                    $scope.isCustomerChatting = true;
                }
                send(MESSAGE, msg);
            }

            stopNotifyTypingToCust();
            $scope.chatMessage.content = "";
            clearTimeout($scope.tmroutCheckAgentStat);
            $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
        }

        function stopNotifyTypingToCust() {
            $scope.isKeyPress = false;
            var req = {
                conversationId: $scope.chatState.conversation_id
            }
            send(NOTIFY_STOP_TYPING, req);
        }

        $scope.validateUser = function (name, email, phone) {
            if (name == "") {
                $scope.requiredName = true;
            } else {
                $scope.requiredName = false;
            }

            if ($scope.requireEmail) {
                if (email == "") {
                    $scope.requiredEmail = true;
                } else {
                    $scope.requiredEmail = false;
                }
            }

            if (!isValidEmailAddress(email) && email != "") {
                $scope.invalidEmail = true;
            } else {
                $scope.invalidEmail = false;
            }

            if ($scope.requirePhone) {
                if (phone == "") {
                    $scope.requiredPhone = true;
                } else {
                    $scope.requiredPhone = false;
                }
            }

            if (!isValidPhoneNumber(phone) && phone != "") {
                $scope.invalidPhone = true;
            } else {
                $scope.invalidPhone = false;
            }
        }

        $scope.editUserInfo = function () {
            var name = $scope.userInfo.username == null ? "" : $scope.userInfo.username.trim();
            var email = $scope.userInfo.email == null ? "" : $scope.userInfo.email.trim();
            var phone = $scope.userInfo.phone == null ? "" : $scope.userInfo.phone.trim();
            if ($scope.listService.length > 1) {
                var service = $scope.userInfo.selectedService;
            }

            $scope.validateUser(name, email, phone);

            if ($scope.listService.length > 1) {
                if (service.serviceId == -1) {
                    $scope.requireService = true;
                } else {
                    $scope.requireService = false;
                }
            }

            var afValid = $scope.userInfo.validateAdditionFields($scope.lstAdditionField);
            if (!afValid) {
                return;
            }
            if ($scope.requiredName || $scope.requiredEmail || $scope.invalidEmail || $scope.requiredPhone || $scope.invalidPhone || $scope.requireService) {
                return;
            }

            $scope.chatState.visitor_name = name;
            $scope.chatState.visitor_email = email;
            $scope.chatState.visitor_phone = phone;
            $scope.chatState.setAdditionFields($scope.lstAdditionField, $scope.userInfo);
            if ($scope.listService.length > 1) {
                $scope.chatState.service_id = service.serviceId;
            }

            $scope.isSignin = true;
            // $scope.visitorName = $scope.chatState.visitor_name;
            // $scope.visitorEmail = $scope.chatState.visitor_email;
            // $scope.visitor_phone = $scope.chatState.visitor_phone;
            $scope.visitorInfo.setBasicInfo(name, email, phone);
            $scope.visitorInfo.setAdditionFields($scope.lstAdditionField, $scope.userInfo);
            $scope.login.setBasicInfo(name, email, phone);
            $scope.login.setAdditionFields($scope.lstAdditionField, $scope.userInfo);
            // $scope.login.username = $scope.chatState.visitor_name;
            // $scope.login.email = $scope.chatState.visitor_email;
            // $scope.login.phone = $scope.chatState.visitor_phone;
            $scope.isClickSignin = false;
            $scope.$window.onclick = null;
            $scope.isEditInfo = false;


            saveChatStateToStorage();

            // var infoVisitor = {
            //     name: name,
            //     email: email,
            //     phone: phone
            // };

            var infoVisitor = new InfoVisitor();
            infoVisitor.setBasicInfo(name, email, phone);
            infoVisitor.setAdditionInfo($scope.lstAdditionField, $scope.userInfo);
            $scope.visitorInfo.setBasicInfo(name, email, phone);
            // $scope.visitorName = name;
            // $scope.visitorEmail = email;
            // $scope.visitorPhone = phone;
            send(UPDATE_VISITOR_INFO, infoVisitor);
            isSynced = false;

        }

        $scope.onFileSelected = function (scope) {
            var file = scope.myFile;
            $scope.isClickOption = false;
            $scope.$window.onclick = null;
            if (file.size > 3 * 1024 * 1024) {
                alert($filter('translate')('LBL_FILE_SIZE'));
                return;
            }
            if (/.*\.(png|jpg|jpeg|gif|doc|docx|txt|rtf|pdf|xls|xlsx|csv)$/.test(file.name.toLowerCase()) == false) {
                alert($filter('translate')('LBL_CHAT_UPLOAD_ERR_EXTENSION'));
                return;
            }
            $scope.uploadFile(file, uploadUrl, "");
        }

        $scope.uploadOnSelect = function (file) {
            if (file != undefined && file != null) {
                Upload.upload({
                    url: uploadUrl,
                    data: { 'fileUp': file }
                }).then(function (resp) {
                    log('Success ' + resp.config.data.file.name + 'uploaded. Response: ' + resp.data);
                }, function (resp) {
                    log('Error status: ' + resp.status);
                }, function (evt) {
                    log('progress: ' + progressPercentage + '% ' + evt.config.data.file.name);
                });
            }
            ;
        }
        $scope.test = function (pasteEvent) {
            var clipData = (pasteEvent.clipboardData || pasteEvent.originalEvent.clipboardData);
            angular.forEach(clipData.items, function (item, key) {
                if (clipData.items[key]['type'].match(/image.*/)) {
                    // if it is a image
                    var img = clipData.items[key].getAsFile();
                    log('A image sized ' + img.size + ' is being uploaded.');
                    if (img.size > $scope.maxUploadSize) {
                        $.jGrowl($filter('translate')('MAX_SIZE_UPLOAD'), { theme: 'error' });
                        return false;
                    }
                    var fd = new FormData();
                    fd.append('fileUp', img);
                    if (img.name == "") {
                        fd.append('fileUp', img);
                    } else {
                        fd.append('fileUp', img, img.name);
                    }
                    // CHANGE /post/paste TO YOUR OWN FILE RECEIVER
                    log(img);
                    log(angular.identity);
                    $http.post(uploadUrl, fd, {
                        transformRequest: angular.identity,
                        headers: {
                            'Content-Type': undefined,
                        }
                    }).success(function (url) {
                        log(url);
                        // the url returns
                    }).error(function (data) {
                        log(data);
                    });
                }

            });
        }

        $scope.uploadFile = function (file, uploadUrl, fileName) {
            if ($scope.uploading) {
                alert($filter('translate')('LBL_UPLOADING'));
            } else {
                $scope.uploading = true;
                var fd;
                if (typeof FormData == "undefined") {
                    $scope.uploading = false;
                    alert($filter('translate')('LBL_BROWSER_NOT_SUPPORT'));
                } else {
                    fd = new FormData();
                    if (fileName == "") {
                        fd.append('fileUp', file);
                    } else {
                        fd.append('fileUp', file, fileName);
                    }
                    $http.post(uploadUrl, fd, {
                        transformRequest: angular.identity,
                        headers: { 'Content-Type': undefined }
                    }).then(function (result) {
                        if (result.data.result == 0) {
                            $scope.uploading = false;
                            alert($filter('translate')('LBL_UPLOAD_FAIL'));
                        } else {
                            var uploadMessage = {
                                conversationId: $scope.chatState.conversation_id,
                                fileId: result.data.fileId,
                                fileName: result.data.fileName,
                                url: result.data.url
                            }
                            send(SEND_FILE, uploadMessage);
                        }
                    }, function () {
                        $scope.uploading = false;
                        alert($filter('translate')('LBL_UPLOAD_FAIL'));
                    })
                }
            }
        }

        $scope.sendVisitorInfo = function () {
            var host = document.location.host;
            if (parent !== window) {
                host = document.referrer;
            }
            var url = {
                url: host,
                title: $scope.pageTitle ? $scope.pageTitle : null,
                referrer: $scope.referrer ? $scope.pageTitle : null
            }
            send(VISITOR_VISIT_PATH_URL, url);
        }

        function initWorkspace() {
            checkChatStatus();
            restoreChatState();
        }

        function checkChatStatus() {
            if (localStorage.getItem("chatState_undefined") != null) {
                localStorage.removeItem("chatState_undefined");
            }
            if (localStorage.getItem("chatState_" + $scope.domainId) != null) {
                // $scope.chatState = JSON.parse(localStorage.getItem("chatState_" + $scope.domainId));
                $scope.chatState = new ChatState();
                var dataState = JSON.parse(localStorage.getItem("chatState_" + $scope.domainId));
                $scope.chatState.setBasicAttr(dataState);
                if (!$scope.chatState.visitorAdditionField || angular.equals($scope.chatState.visitorAdditionField, {})) {
                    $scope.chatState.visitorAdditionField = {};
                    $scope.chatState.setDefaultAdditionFieldsValue($scope.lstAdditionField);
                }
                if (parentUsername != null && parentUsername != "" && $scope.chatState.visitor_name != parentUsername) {
                    $scope.chatState = null;
                }
            } else {
                $scope.chatState = null;
            }
            if ($scope.chatState === null || $scope.chatState === undefined) {
                log("chat_state = null");
                $scope.chatState = new ChatState();
                $scope.chatState.setDefaultAdditionFieldsValue($scope.lstAdditionField);
                //                return;
            }

            if (parentUsername != null && parentUsername != "") {
                $scope.chatState.visitor_name = parentUsername;
            }
            if (parentEmail != null && parentEmail != "") {
                $scope.chatState.visitor_email = parentEmail;
            }
            if (parentPhone != null && parentPhone != "") {
                $scope.chatState.visitor_phone = parentPhone;
            }

            if ($scope.chatState.enableSound == undefined) {
                $scope.chatState.enableSound = true;
                //                saveChatStateToStorage();
            }
            $scope.addNewVersionChatStateInfo();
            //        $scope.listMessage = $scope.chatState.history.slice();
            if ($scope.chatState.history) {
                for (var i = 0; i < $scope.chatState.history.length; i++) {
                    var temp = jQuery.extend(true, {}, $scope.chatState.history[i]);
                    temp.content = getMessageChat(temp.content);
                    $scope.listMessage.push(temp);
                    //            $scope.listMessage[i].content = getMessageChat($scope.listMessage[i].content);

                }
            }


            if ($scope.listService.length == 1) {
                $scope.chatState.service_id = $scope.listService[0].serviceId;
            } else {
                var selectName = $filter('translate')('LBL_SELECT_ONE_SERVICE');
                $scope.listService.unshift({ "serviceId": "-1", "serviceName": selectName });
            }
            $scope.login.selectedService = $scope.listService[0];

            $scope.login.content = "";

            // $scope.visitorName = $scope.chatState.visitor_name;
            // $scope.visitorEmail = $scope.chatState.visitor_email;
            // $scope.visitorPhone = $scope.chatState.visitor_phone;
            $scope.visitorInfo.setBasicInfo($scope.chatState.visitor_name, $scope.chatState.visitor_email, $scope.chatState.visitor_phone);
            saveChatStateToStorage();
            return $scope.chatState;
        }

        $scope.addNewVersionChatStateInfo = function () {
            if (!$scope.chatState.triggerState) {
                $scope.chatState.triggerState = [];
            }
            if ($scope.chatState.replyFromTrigger == undefined || $scope.chatState.replyFromTrigger == null) {
                $scope.chatState.replyFromTrigger = 0;
            }
            //            saveChatStateToStorage();
        }

        $scope.onPostBackButton = function(item) {
            let data = {
                conversationId: $scope.chatState.conversation_id,
                serviceId: $scope.chatState.service_id,
                accountId: $scope.accountId,
                payload: item.payload,
                title: item.title
            }

            $scope.leftSlider = 0;

            send(POST_BACK_BUTTON, data);
        }

        $scope.checkRightSlider = function() {
            $sliderLength = $('#quickRepliesSuggestion').width();
            if ($scope.leftSlider - 270 > -$sliderLength) {
                return true;
            } 
            return false;
        }

        $scope.prevSlider = function() {
            $scope.leftSlider += 100;
            if ($scope.leftSlider > 0) {
                $scope.leftSlider = 0;
            }
        }

        $scope.nextSlider = function() {
            $scope.leftSlider -= 100;
            if ($scope.leftSlider - 270 < -$sliderLength) {
                $scope.leftSlider =  -$sliderLength + 270;
            }
        }

        $scope.checkRightSliderGallery = function(index, message) {
            var length = $('#gallerySuggestion_' + index).width();
            if (message.leftSlider - 165 > -length) {
                return true;
            } 
            return false;
        }

        $scope.prevGallery = function(index, message) {
            message.leftSlider += 165;
            if (message.leftSlider > 0) {
                message.leftSlider = 0;
            }
        }

        $scope.nextGallery = function(index, message) {
            var length = $('#gallerySuggestion_' + index).width();
            message.leftSlider -= 165;
            if (message.leftSlider - 165 < -length) {
                message.leftSlider =  -length + 165;
            }
        }

        function markLanding() {
            if (!getCookie("chatState_sourceUrl_" + $scope.domainId)) {
                var host = document.location.host;
                if (parent !== window) {
                    host = document.referrer;
                }
                var sourceURL = { landing: host, referrer: $scope.referrer, isSentBefore: false, test: '1' };
                setCookie("chatState_sourceUrl_" + $scope.domainId, JSON.stringify(sourceURL), '');
            }
        }

        function restoreChatState() {
            if ($scope.chatState !== null && $scope.chatState !== "undefined") {
                log("restoring chat state");
                var requestResumeSession = {
                    visitorId: $scope.chatState.visitor_id,
                    service_id: $scope.chatState.service_id,
                    conversationId: $scope.chatState.conversation_id,
                    domain: $scope.domainCode,
                };
                sendWaitForConnection(CUSTOMER_RESUMING_REQUEST, requestResumeSession);
            }
        }

        function setLandingTime() {
            $scope.currentTimeOnSite = new Date().getTime() / 1000 | 0;
            $scope.browserInfo = new $.jqx.response();
            if (typeof (Storage) !== "undefined") {
                if (!sessionStorage.getItem("cs_landingtime")) {
                    sessionStorage.setItem("cs_landingtime", new Date().getTime() / 1000 | 0);
                }
            } else {
                log('Browser not supported storage');
            }
        }

        function getQueryString() {
            if (isMobile.any()) {
                $scope.isMobile = true;
            }
            var q = $location.search();
            var queryString = atob(decodeURIComponent(q.key));
            var domain = getParameterByName("domain", queryString);
            parentUsername = getParameterByName("username", queryString);
            var color = getParameterByName("color", queryString);
            parentEmail = getParameterByName("email", queryString);
            parentPhone = getParameterByName("phone", queryString);
            isAuto = getParameterByName("auto", queryString);
            pageTitle = getParameterByName("pageTitle", queryString);
            referrer = getParameterByName("referrer", queryString);
            hidePopup = getParameterByName("hide", queryString) == true;
            domainId = getParameterByName("domainId", queryString);
            if (isMobile.iOS() && isSafari() && domainId) {
                syncStorage(domainId);
            }
            if (parentUsername != null && parentUsername != "") {
                $scope.isDisable.username = true;
            }
            if (parentEmail != null && parentEmail != "" && isValidEmailAddress(parentEmail)) {
                $scope.isDisable.email = true;
            }
            if (parentPhone != null && parentPhone != "" && isValidPhoneNumber(parentPhone)) {
                $scope.isDisable.phone = true;
            }
            if (pageTitle != null && pageTitle != "") {
                $scope.pageTitle = pageTitle;
            }
            if (referrer != null && referrer != "") {
                $scope.referrer = referrer;
            }

            var language = getParameterByName("language", queryString);
            DomainService.getChat(domain, parentUsername).then(function (data) {
                if (data == null || data == undefined) {
                    return;
                } else if (data.data && data.data.is_banned == true) {
                    return;
                }

                $scope.useFacebook = data.data.useFacebook == 1;
                if (data.data.pageId != null && data.data.pageId != "") {
                    $scope.pageId = data.data.pageId;
                }

                if (!$scope.useFacebook) {
                    CS_WEB_PUSH = data.data.chatServer;
                    uploadUrl = data.data.uploadUrl;
                    webPush.connect(CS_WEB_PUSH, 0);
                }
                $scope.lstAdditionField = data.data.lstAdditionField;
                for (var i = 0; i < $scope.lstAdditionField.length; i++) {
                    if ($scope.lstAdditionField[i].type == 3) {
                        $scope.lstAdditionField[i].data.unshift({
                            id: -1,
                            description: "-- " + $scope.lstAdditionField[i].field_label + " --",
                            user_field_id: $scope.lstAdditionField[i].user_field_id
                        });
                    }
                }
                $scope.userInfo.setDefaultAdditionFieldsValue($scope.lstAdditionField);
                $scope.login.setDefaultAdditionFieldsValue($scope.lstAdditionField)
                $scope.serviceName = data.data.domainValue;
                $scope.domainCode = data.data.domainCode;
                $scope.domainPath = data.data.path;
                $scope.accountId = data.data.accountId;
                $scope.clientIp = data.data.clientIp;
                if ($scope.isMobile) {
                    //mobile viewport
                    if (data.data.color_mobile != null && data.data.color_mobile != "") {
                        $scope.backgroundColor = data.data.color_mobile;
                    } else if (data.data.color != null && data.data.color != "") {
                        $scope.backgroundColor = data.data.color;
                    }

                    if (data.data.off_title_mobile != null && data.data.off_title_mobile != "") {
                        $scope.offTitle = data.data.off_title_mobile;
                    } else if (data.data.offTitle != null && data.data.offTitle != "") {
                        $scope.offTitle = data.data.offTitle;
                    }

                    if (data.data.on_title_mobile != null && data.data.on_title_mobile != "") {
                        $scope.onTitle = data.data.on_title_mobile;
                    } else if (data.data.onTitle != null && data.data.onTitle != "") {
                        $scope.onTitle = data.data.onTitle;
                    }

                    if (data.data.avatar_mobile != null && data.data.avatar_mobile != "") {
                        $scope.agentAvatarDefault = data.data.avatar_mobile;
                    } else if (data.data.avatar != null && data.data.avatar != "") {
                        $scope.agentAvatarDefault = data.data.avatar;
                    }

                    if (data.data.agent_name_mobile != null && data.data.agent_name_mobile != "") {
                        $scope.agentNameDefault = data.data.agent_name_mobile;
                    } else if (data.data.agentName != null && data.data.agentName != "") {
                        $scope.agentNameDefault = data.data.agentName;
                    }

                    if (data.data.agent_title_mobile != null && data.data.agent_title_mobile != "") {
                        $scope.agentDescriptionDefault = data.data.agent_title_mobile;
                    } else if (data.data.agentTitle != null && data.data.agentTitle != "") {
                        $scope.agentDescriptionDefault = data.data.agentTitle;
                    }

                    if (data.data.agent_busy_mobile != null && data.data.agent_busy_mobile != "") {
                        $scope.agentBusyDefault = data.data.agent_busy_mobile;
                    } else if (data.data.agentBusy != null && data.data.agentBusy != "") {
                        $scope.agentBusyDefault = data.data.agentBusy;
                    }

                    if (data.data.offline_info_mobile != null && data.data.offline_info_mobile != "") {
                        $scope.offlineInfo = data.data.offline_info_mobile;
                    } else if (data.data.offlineInfo != null && data.data.offlineInfo != "") {
                        $scope.offlineInfo = data.data.offlineInfo;
                    }

                    if (data.data.SEND_SUCCESS_MOBILE != null && data.data.SEND_SUCCESS_MOBILE != "") {
                        $scope.offlineSuccess = data.data.SEND_SUCCESS_MOBILE;
                    } else if (data.data.sendSuccess != null && data.data.sendSuccess != "") {
                        $scope.offlineSuccess = data.data.sendSuccess;
                    }

                    $scope.widget_logo_custom = data.data.widget_logo_custom ? data.data.widget_logo_custom : "";
                    $scope.widget_position_mobile = data.data.widget_position_mobile ? data.data.widget_position_mobile : 2;
                    $scope.widget_type1_logo_mobile = data.data.widget_type1_logo_mobile ? data.data.widget_type1_logo_mobile : 1;
                    $scope.widget_type_mobile = data.data.widget_type_mobile ? data.data.widget_type_mobile : 1;
                    $scope.changeWidgetType($scope.widget_type_mobile);
                    $scope.changeWidgetPosition($scope.widget_position_mobile);
                    $scope.enableEmail = data.data.ENABLE_EMAIL_MOBILE !== null && data.data.ENABLE_EMAIL_MOBILE !== "" ? data.data.ENABLE_EMAIL_MOBILE == 1 : data.data.enableEmail == 1;
                    $scope.requireEmail = data.data.REQUIRED_EMAIL_MOBILE !== null && data.data.REQUIRED_EMAIL_MOBILE !== "" ? data.data.REQUIRED_EMAIL_MOBILE == 1 : data.data.requiredEmail == 1;
                    $scope.enablePhone = data.data.ENABLE_PHONE_MOBILE !== null && data.data.ENABLE_PHONE_MOBILE !== "" ? data.data.ENABLE_PHONE_MOBILE == 1 : data.data.enablePhone == 1;
                    $scope.requirePhone = data.data.REQUIRED_PHONE_MOBILE !== null && data.data.REQUIRED_PHONE_MOBILE !== "" ? data.data.REQUIRED_PHONE_MOBILE == 1 : data.data.requiredPhone == 1;
                } else {
                    //Desktop viewport

                    if (data.data.color != null && data.data.color != "") {
                        $scope.backgroundColor = data.data.color;
                    }

                    if (data.data.offTitle != null && data.data.offTitle != "") {
                        $scope.offTitle = data.data.offTitle;
                    }

                    if (data.data.onTitle != null && data.data.onTitle != "") {
                        $scope.onTitle = data.data.onTitle;
                    }

                    if (data.data.avatar != null && data.data.avatar != "") {
                        $scope.agentAvatarDefault = data.data.avatar;
                    }

                    if (data.data.agentName != null && data.data.agentName != "") {
                        $scope.agentNameDefault = data.data.agentName;
                    }

                    if (data.data.agentTitle != null && data.data.agentTitle != "") {
                        $scope.agentDescriptionDefault = data.data.agentTitle;
                    }

                    if (data.data.agentBusy != null && data.data.agentBusy != "") {
                        $scope.agentBusyDefault = data.data.agentBusy;
                    }

                    if (data.data.offlineInfo != null && data.data.offlineInfo != "") {
                        $scope.offlineInfo = data.data.offlineInfo;
                    }

                    if (data.data.sendSuccess != null && data.data.sendSuccess != "") {
                        $scope.offlineSuccess = data.data.sendSuccess;
                    }

                    if (data.data.sendSuccess != null && data.data.sendSuccess != "") {
                        $scope.offlineSuccess = data.data.sendSuccess;
                    }


                    $scope.enableEmail = data.data.enableEmail == 1;
                    $scope.requireEmail = data.data.requiredEmail == 1;
                    $scope.enablePhone = data.data.enablePhone == 1;
                    $scope.requirePhone = data.data.requiredPhone == 1;
                }

                if (data.data.logoUrl != null && data.data.logoUrl != "") {
                    $scope.homepage = data.data.logoUrl;
                }

                if (data.data.logoImage != null && data.data.logoImage != "") {
                    $scope.logo = data.data.logoImage;
                }

                if (data.data.logoDescription != null && data.data.logoDescription != "") {
                    $scope.titleLogo = data.data.logoDescription;
                }
                $scope.lstTrigger = data.data.lstTrigger;
                for (var i = 0; i < $scope.lstTrigger.length; i++) {
                    for (var j = 0; j < $scope.lstTrigger[i].conditions.length; j++) {
                        if ($scope.lstTrigger[i].conditions[j].field == "visitor_time_on_site" || $scope.lstTrigger[i].conditions[j].field == "visitor_time_on_page") {
                            $scope.lstTrigger[i].needInterval = true;
                        }
                    }
                }
                $scope.autoPopup = 0;
                if ($scope.autoPopup) {
                    $scope.autoMessage = data.data.autoMessage;
                    $scope.autoName = data.data.autoName;
                    $scope.autoType = data.data.autoType;
                    $scope.autoTime = data.data.autoTime;
                    $scope.autoService = data.data.autoServiceId;
                    $scope.autoDelay = data.data.autoDelay;
                }

                if (language == "" || (language != "vi" && language != "en")) {
                    $scope.language = data.data.language;
                } else {
                    $scope.language = language;
                }
                TranslateService.translate($scope.language);

                if (!$scope.useFacebook) {
                    if (data.data.listService != null && data.data.listService.length != 0) {
                        $.each(data.data.listService, function (ind, val) {
                            $scope.listServiceStr += val.serviceId + ";";
                        });
                        $scope.domainId = data.data.domainId;
                        if (localStorage.getItem("chatState_devicekey_" + $scope.domainId) == null) {
                            var device_key = encodeURIComponent(btoa((new Date).getTime()));
                            localStorage.setItem("chatState_devicekey_" + $scope.domainId, device_key);
                            if (isMobile.iOS() && isSafari() && domainId) {
                                var datasend = {
                                    id: 6,
                                    type: 'saveIfrChatStateDeviceKey',
                                    value: {
                                        name: "chatState_devicekey_" + domainId,
                                        value: device_key
                                    }
                                };
                                parent.postMessage(JSON.stringify(datasend), "*");
                            }
                        }


                        if ($scope.isMobile) {
                            if (data.data.REQUIRED_EMAIL_MOBILE === null || data.data.REQUIRED_EMAIL_MOBILE === "") {
                                data.data.REQUIRED_EMAIL_MOBILE = data.data.requiredEmail;
                            }
                            if (data.data.REQUIRED_PHONE_MOBILE === null || data.data.REQUIRED_PHONE_MOBILE === "") {
                                data.data.REQUIRED_PHONE_MOBILE = data.data.requiredPhone;
                            }

                            if (data.data.REQUIRED_EMAIL_MOBILE == 0 && data.data.REQUIRED_PHONE_MOBILE == 0) {
                                $scope.needSignin = false;
                            } else {
                                $scope.needSignin = true;
                            }
                        } else {
                            if (data.data.requiredEmail == 0 && data.data.requiredPhone == 0) {
                                $scope.needSignin = false;
                            } else {
                                $scope.needSignin = true;
                            }
                        }

                        $scope.listService = data.data.listService;

                        //                    if ($scope.needSignin == false && $scope.listService.length == 1) {
                        //                        $scope.isChatting = true;
                        ////                        $scope.isSignin = true;
                        //                    }

                        markLanding();
                        initWorkspace();

                    }
                }
            });
        }

        function send(service, data) {
            var packet = { service: service, data: data };
            webPush.send(packet);
            log("Client send: " + JSON.stringify(packet));
            if (service === MESSAGE) {
                //var senderVisitorId = chat_state.visitor_id;
                var senderAgentId = null;
                //var time = Date.now();
                var content = data.message;
                var logChat = new Message(senderAgentId, 1, content);
                var logChatData = new Message(senderAgentId, 1, getMessageChat(content));
                $scope.chatState.history.push(logChat);
                $scope.listMessage.push(logChatData);
                saveChatStateToStorage();
            }
        }

        //doi cho websocket open roi moi send
        function sendWaitForConnection(service, data) {
            var packet = { service: service, data: data };
            webPush.sendWait(packet);
            log("Client sendWait: " + JSON.stringify(packet));
            if (service === MESSAGE) {
                var senderAgentId = null;
                var content = data.message;
                var logChat = new Message(senderAgentId, 1, content);
                var logChatData = new Message(senderAgentId, 1, getMessageChat(content));
                $scope.chatState.history.push(logChat);
                $scope.listMessage.push(logChatData);
                saveChatStateToStorage();
            }
        }

        function getMessageChat(text) {
            return $sce.trustAsHtml(urlify(htmlEncode(text).replace(/(?:\r\n|\r|\n)/g, '<br/>')));
        }

        function urlify(text) {
            var urlRegex = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;()]*[-A-Z0-9+&@#\/%=~_|])/ig;
            return text.replace(urlRegex, function (url) {
                if (url.trim() == text.trim()) {
                    if (isImageLink(url)) {
                        return '<a href="' + url + '" target="_blank"><img src="' + url + '" style="max-height:110px;max-width: 190px"/></a>';
                    }
                }
                return '<a href="' + url + '" target="_blank">' + url + '</a>';
            })
        }

        function htmlEncode(value) {
            return $('<div/>').text(value).html();
        }

        function saveChatStateToStorage() {
            localStorage.setItem("chatState_" + $scope.domainId, JSON.stringify($scope.chatState));
            if (isMobile.iOS() && isSafari() && domainId) {
                var data = {
                    id: 6,
                    type: 'saveIfrChatState',
                    value: {
                        name: "chatState_" + domainId,
                        value: $scope.chatState
                    }
                };
                parent.postMessage(JSON.stringify(data), "*");
            }
        }

        $scope.reconnect = function () {
            $scope.connecting = true;
            webPush.connect(CS_WEB_PUSH, 0);
            restoreChatState();
        }

        webPush.onMessageReceived = function (dataReceived) {
            log('Server response: ' + JSON.stringify(dataReceived));
            var data = dataReceived.data;
            var type = dataReceived.type;
            var mes;

            switch (type) {
                case CUSTOMER_LOGIN:
                    //                    if (isFirstLogin) {
                    //                        restoreChatState();
                    //                    }
                    var name, email, phone;
                    if (data.name != null) {
                        // $scope.visitorName = parentUsername != undefined && parentUsername != null && parentUsername != "" ? parentUsername : data.name;
                        name = parentUsername != undefined && parentUsername != null && parentUsername != "" ? parentUsername : $scope.chatState.visitor_name || data.name;
                    } else {
                        name = parentUsername != undefined && parentUsername != null && parentUsername != "" ? parentUsername : $scope.chatState.visitor_name;
                    }
                    if (data.email != null) {
                        // $scope.visitorEmail = parentEmail != undefined && parentEmail != null && parentEmail != "" ? parentEmail : data.email;
                        email = parentEmail != undefined && parentEmail != null && parentEmail != "" ? parentEmail : $scope.chatState.visitor_email || data.email;
                    } else {
                        email = parentEmail != undefined && parentEmail != null && parentEmail != "" ? parentEmail : $scope.chatState.visitor_email;
                    }
                    phone = parentPhone != undefined && parentPhone != null && parentPhone != "" ? parentPhone : $scope.chatState.visitor_phone;
                    var additionFields = data.additionFields || $scope.chatState.visitorAdditionField;
                    $scope.visitorInfo.setBasicInfo(name, email, phone);
                    $scope.visitorInfo.setAdditionFields($scope.lstAdditionField, additionFields);
                    $scope.chatState.visitor_id = data.userId;
                    isFirstLogin = true;//visitor da gui request login first time
                    //                    restoreChatState();
                    $scope.loggedinFirstTime = true;
                    saveChatStateToStorage();
                    $scope.$digest();
                    break;
                case MESSAGE:
                    $scope.chatState.conversation_id = data.conversationId;
                    $scope.chatState.service_id = data.serviceId;

                    if (!isSynced) {
                        //                        $scope.isSignin = true;
                        $scope.isChatting = true;
                        var storageStr = localStorage.getItem("chatState_" + $scope.domainId);
                        var storage = JSON.parse(storageStr);
                        $scope.chatState.visitor_name = storage.visitor_name;
                        $scope.chatState.visitor_email = storage.visitor_email;
                        $scope.chatState.visitor_phone = storage.visitor_phone;
                        $scope.visitorInfo.setBasicInfo(storage.visitor_name, storage.visitor_email, storage.visitor_phone);
                        // $scope.login.username = $scope.visitorInfo.visitorName;
                        // $scope.login.email = $scope.visitorInfo.visitorEmail;
                        // $scope.login.phone = $scope.visitorInfo.visitorPhone;
                        $scope.login.setBasicInfo($scope.visitorInfo.visitorName, $scope.visitorInfo.visitorEmail, $scope.visitorInfo.visitorPhone);
                        $scope.userInfo.setBasicInfo($scope.visitorInfo.visitorName, $scope.visitorInfo.visitorEmail, $scope.visitorInfo.visitorPhone);
                        // $scope.userInfo.username = $scope.visitorName;
                        // $scope.userInfo.email = $scope.visitorEmail;
                        // $scope.userInfo.phone = $scope.visitorPhone;
                        $scope.isLike = $scope.chatState.isLike = storage.isLike;
                        $scope.isDislike = $scope.chatState.isDislike = storage.isDislike;
                        if ($scope.visitorInfo.visitorName !== "") {
                            $scope.isSignin = true;
                        }
                        $scope.chatState.visitor_id = storage.visitor_id;
                        isSynced = true;
                    }

                    //                    checkChatStatus();
                    if (data.needShow === true) {
                        var msgData = new Message(null, 1, data.message, data.time);
                        var msg = new Message(null, 1, getMessageChat(data.message), data.time);
                        $scope.chatState.history.push(msgData);
                        $scope.listMessage.push(msg);
                    }
                    $scope.sendLandingInfo(data.conversationId);
                    $scope.$digest();
                    saveChatStateToStorage();
                    $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
                    break;
                case HAVE_MESSAGE://co phan hoi tu agent
                    if (data.conversationId == $scope.chatState.conversation_id) {
                        if ($scope.chatState.enableSound == true) {
                            messageAudio.play();
                        }
                        if (data.messageType == 4) {
                            var content = JSON.parse(data.message);
                            var chatContent = "";
                            if (content.attachment != null) {
                                if (content.attachment.type == 'template') {
                                    chatContent = getMessageChat(content.attachment.payload.text);
                                } else if (content.attachment.type == 'video' || content.attachment.type == 'audio' || content.attachment.type == 'file' || content.attachment.type == 'image') {
                                    chatContent = getMessageChat(content.attachment.payload.url);
                                }
                            } else if (content.quick_replies != null) {
                                chatContent = getMessageChat(content.text);
                            }
                            var fromName = data.fromFullname;
                            var senderAgentId = fromName;

                            var msgData =  new Message(senderAgentId, 5, chatContent, data.time);
                            msgData.botContent = content;
                            msgData.leftSlider = 0;
                            var logChatData = new Message(senderAgentId, 5, chatContent, data.time);
                            logChatData.botContent = content;
                            logChatData.leftSlider = 0;
                            $scope.chatState.history.push(msgData);
                            if (!$scope.maximize) {
                                $scope.newMessage++;
                            }
                        } else {
                            var content = data.message;
                            var fromName = data.fromFullname;
                            var senderAgentId = fromName;
                            var msgData = new Message(senderAgentId, 2, content, data.time);
                            var logChatData = new Message(senderAgentId, 2, getMessageChat(content), data.time);
                            $scope.chatState.history.push(msgData);
                            if (!$scope.maximize) {
                                $scope.newMessage++;
                            }
                        }
                        $scope.listMessage.push(logChatData);
                        saveChatStateToStorage();
                        $scope.$digest();
                        $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
                        //                        if (!$scope.isMobile && !$scope.isTypingChat) {
                        //                            notifyNewMessage(content);
                        //                        }
                        $scope.openChatBox();
                    }
                    break;
                case LIVECHAT_RETURN_PERSISTENT_MENU:
                    $scope.botMenu = data.menuList;
                    break;
                case USER_JOIN_CONVERSATION:
                    mes = data.username + $filter('translate')('LBL_JOIN_CHAT');
                    var logChatData = new Message(null, 3, mes);
                    $scope.chatState.history.push(logChatData);
                    $scope.listMessage.push(logChatData);
                    saveChatStateToStorage();
                    $scope.$digest();
                    $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
                    break;
                case AGENT_END_CONVERSATION_CUSTOMER:
                    mes = data.fullName + $filter('translate')('LBL_END_CHAT');
                    var logChatData = new Message(null, 3, mes);
                    $scope.chatState.history.push(logChatData);
                    $scope.listMessage.push(logChatData);
                    $scope.chatState.agent_name = null;
                    $scope.chatState.agent_group = null;
                    saveChatStateToStorage();
                    $scope.allowRating = false;
                    $scope.isTyping = false;
                    $scope.agentName = $scope.agentNameDefault;
                    $scope.agentDescription = $scope.agentDescriptionDefault;
                    $scope.avatar = $scope.agentAvatarDefault;
                    $scope.changeLandingSendState(false);
                    $scope.$digest();
                    $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
                    break;
                case AGENT_INFO_CUSTOMER:
                    if ($scope.chatState.agent_name != data.fullName) {
                        $scope.chatState.agent_name = data.fullName ? data.fullName : $scope.agentNameDefault;
                        $scope.chatState.agent_group = data.service_name ? data.service_name : $scope.agentDescriptionDefault;
                        $scope.chatState.agent_avatar = data.avatar ? data.avatar : $scope.agentAvatarDefault;
                        $scope.agentName = data.fullName ? data.fullName : $scope.agentNameDefault;
                        $scope.agentDescription = data.service_name ? data.service_name : $scope.agentDescriptionDefault;
                        $scope.avatar = data.avatar ? data.avatar : $scope.agentAvatarDefault;
                        mes = data.fullName + $filter('translate')('LBL_JOIN_CHAT');
                        var logChatData = new Message(null, 3, mes);
                        $scope.chatState.history.push(logChatData);
                        $scope.listMessage.push(logChatData);
                        //$scope.listMessage.push(msg);
                        saveChatStateToStorage();
                        $scope.allowRating = true;
                        $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
                    }
                    $scope.$digest();
                    break;
                case TRANSFER_CHAT_RESPONSE:
                    //Agent left chat
                    mes = $scope.chatState.agent_name + $filter('translate')('LBL_LEAVE_CHAT');
                    var logChatData = new Message(null, 3, mes);
                    $scope.chatState.history.push(logChatData);
                    $scope.listMessage.push(logChatData);
                    $scope.chatState.agent_name = data.fullName;
                    $scope.chatState.agent_group = data.service_name;
                    $scope.agentName = data.fullName;
                    $scope.agentDescription = data.service_name;
                    $scope.avatar = data.avatar ? data.avatar : $scope.agentAvatarDefault;
                    mes = data.fullName + $filter('translate')('LBL_JOIN_CHAT');
                    var logChatData = new Message(null, 3, mes);
                    $scope.chatState.history.push(logChatData);
                    $scope.listMessage.push(logChatData);
                    saveChatStateToStorage();
                    $scope.$digest();
                    $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
                    break;
                case CHAT_SUPER_SUPPORT_END:
                    mes = data.fullName + $filter('translate')('LBL_LEAVE_CHAT');
                    var logChatData = new Message(null, 3, mes);
                    $scope.chatState.history.push(logChatData);
                    $scope.listMessage.push(logChatData);
                    saveChatStateToStorage();
                    $scope.$digest();
                    $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
                    break;
                case SUPPORT_CHAT_RESPONSE:
                    mes = data.fullName + $filter('translate')('LBL_JOIN_CHAT');
                    var logChatData = new Message(null, 3, mes);
                    $scope.chatState.history.push(logChatData);
                    $scope.listMessage.push(logChatData);
                    saveChatStateToStorage();
                    $scope.$digest();
                    $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
                    break;
                case RESPONSE_AGENT_MISS_CHAT_TO_CUSTOMER:
                    var logChatData = new Message(null, 3, $scope.agentBusyDefault);
                    $scope.chatState.history.push(logChatData);
                    $scope.listMessage.push(logChatData);
                    $scope.changeLandingSendState(false);
                    $scope.$digest();
                    $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
                    break;
                case CUSTOMER_RESUMING_RESPONSE:

                    var res = data.r;


                    if (res == 1) {
                        $scope.currentResumeState = res;
                        restoreChatBox();
                        $scope.isOffline = false;
                        $scope.sendVisitorInfo();
                        $scope.listMessage = new Array();
                        for (var i = 0; i < data.messages.length; i++) {
                            var content = null;
                            var sender = "";
                            var senderType = 1;
                            var logChatData;
                            if (data.messages[i].senderAgentId) {
                                sender = data.messages[i].senderAgentName;
                                senderType = 2;
                            } else if (data.messages[i].senderVisitorId) {
                                sender = data.messages[i].senderVisitorName;
                                senderType = 1;
                            } else {
                                senderType = 3;
                            }
                            if (data.messages[i].type == 4) {
                                var content = JSON.parse(data.messages[i].content);
                                var chatContent = "";
                                if (content.attachment != null) {
                                    if (content.attachment.type == 'template') {
                                        chatContent = getMessageChat(content.attachment.payload.text);
                                    } else if (content.attachment.type == 'video' || content.attachment.type == 'audio' || content.attachment.type == 'file' || content.attachment.type == 'image') {
                                        chatContent = getMessageChat(content.attachment.payload.url);
                                    }
                                } else if (content.quick_replies != null) {
                                    chatContent = getMessageChat(content.text);
                                }
                                var fromName = data.fromFullname;
                                var senderAgentId = fromName;
    
                                var msgData =  new Message(senderAgentId, 5, chatContent, data.time);
                                msgData.botContent = content;
                                msgData.leftSlider = 0;
                                logChatData = new Message(senderAgentId, 5, chatContent, data.time);
                                logChatData.botContent = content;
                                logChatData.leftSlider = 0;
                                $scope.chatState.history.push(msgData);                                
                            } else if (data.messages[i].type == 2) {
                                var jsonArr = JSON.parse(data.messages[i].content);
                                //                                content = jsonArr.url;
                                logChatData = new Message(sender, 4, "", data.messages[i].time);
                                logChatData.fileName = jsonArr.fileName;
                                logChatData.url = jsonArr.url;
                                if (isImageLink(jsonArr.fileName)) {
                                    logChatData.isImage = 1;
                                }
                            } else {
                                content = data.messages[i].content;
                                logChatData = new Message(sender, senderType, getMessageChat(content), data.messages[i].time);
                            }
                            $scope.listMessage.push(logChatData);
                        }
                        //log("resuming session successful");
                    } else if (res == -2) {
                        $scope.currentResumeState = res;
                        $scope.maximize = false;
                        $scope.isOffline = true;
                        sessionLogout();
                        if (hidePopup) {
                            if ($scope.isChatting) {
                                notifyNewMessage("closeChatBox");
                            } else {
                                notifyNewMessage("closeChatBoxHide");
                            }
                        } else {
                            notifyNewMessage("closeChatBox");
                        }
                        saveChatStateToStorage();
                        if ($scope.domainCode == "support") {
                            setTimeout(function () {
                                restoreChatState();
                            }, checkStatTmrDuration);
                        } else {
                            setTimeout(function () {
                                restoreChatState();
                            }, checkStatTmrDuration);
                        }
                        setTimeout(function () {
                            if (localStorage.getItem("chatState_devicekey_" + $scope.domainId) != null) {
                                setTimeout(function () {
                                    requestFirstLogin();
                                }, 1000);
                            } else {
                                requestFirstLogin();
                            }
                        }, 1000);
                    } else {
                        $scope.tmroutCheckAgentStat = setTimeout(function () {
                            restoreChatState();
                        }, checkStatTmrDuration);
                        if (res == $scope.currentResumeState) {
                            break;
                        }
                        $scope.currentResumeState = res;
                        isFirstLogin = false;
                        $scope.maximize = false;
                        $scope.isOffline = false;
                        log("resuming session failed");
                        sessionLogout();
                        $scope.fireTrigger(1);
                        if (hidePopup) {
                            if ($scope.isChatting) {
                                notifyNewMessage("closeChatBox");
                            } else {
                                notifyNewMessage("closeChatBoxHide");
                            }
                        } else {
                            notifyNewMessage("closeChatBox");
                        }
                        autoLoginTimeout = setTimeout(function () {
                            requestFirstLogin();
                        }, 3000);

                        if (!$scope.requireEmail && !$scope.requirePhone && $scope.login.username != "" && $scope.listService.length <= 1) {
                            $scope.isSignin = true;
                        }

                        saveChatStateToStorage();
                    }
                    if ($scope.listService.length > 1) {
                        $scope.listService[0].serviceName = $filter('translate')('LBL_SELECT_ONE_SERVICE');
                    }

                    $scope.chat = true;
                    $scope.$digest();
                    $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
                    break;
                case AGENT_LOGOUT:
                    mes = data.fullName + $filter('translate')('LBL_LEAVE_CHAT');
                    var logChatData = new Message(null, 3, mes);
                    $scope.chatState.history.push(logChatData);
                    $scope.listMessage.push(logChatData);
                    $scope.$digest();
                    $scope.isTyping = false;
                    clearTimeout($scope.tmroutCheckAgentStat);
                    $scope.tmroutCheckAgentStat = setTimeout(function () {
                        restoreChatState();
                    }, checkStatTmrDuration);
                    $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
                    break;
                case LIKE:
                    var res = data.r;
                    if (res === 1) {
                        var rating = data.rating;
                        if (rating === 0) {
                            $scope.isLike = false;
                            $scope.isDislike = false;
                            var logChatData = new Message(null, 3, $filter('translate')('LBL_CHAT_REMOVE'));
                            $scope.chatState.history.push(logChatData);
                            $scope.listMessage.push(logChatData);
                            $scope.chatState.isLike = false;
                            saveChatStateToStorage();
                        } else {
                            $scope.isLike = true;
                            $scope.isDislike = false;
                            var logChatData = new Message(null, 3, $filter('translate')('LBL_CHAT_GOOD'));
                            $scope.chatState.history.push(logChatData);
                            $scope.listMessage.push(logChatData);
                            $scope.chatState.isLike = true;
                            $scope.chatState.isDislike = false;
                            saveChatStateToStorage();
                        }
                    } else {
                        log("Rating failed");
                    }
                    $scope.$digest();
                    $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
                    break;
                case DISLIKE:
                    var res = data.r;
                    if (res === 1) {
                        var rating = data.rating;
                        if (rating === 0) {
                            $scope.isLike = false;
                            $scope.isDislike = false;
                            var logChatData = new Message(null, 3, $filter('translate')('LBL_CHAT_REMOVE'));
                            $scope.chatState.history.push(logChatData);
                            $scope.listMessage.push(logChatData);
                            $scope.chatState.isDislike = false;
                            saveChatStateToStorage();
                        } else {
                            $scope.isLike = false;
                            $scope.isDislike = true;
                            var logChatData = new Message(null, 3, $filter('translate')('LBL_CHAT_BAD'));
                            $scope.chatState.history.push(logChatData);
                            $scope.listMessage.push(logChatData);
                            $scope.chatState.isLike = false;
                            $scope.chatState.isDislike = true;
                            saveChatStateToStorage();
                        }
                    } else {
                        log("Rating failed");
                    }
                    $scope.$digest();
                    $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
                    break;
                case SEND_FILE:
                    var res = data.res;
                    if (res == 1) {
                        var logChatData = new Message(null, 4, "");
                        logChatData.fileName = data.fileName;
                        logChatData.url = data.url;
                        if (isImageLink(data.fileName)) {
                            logChatData.isImage = 1;
                        }
                        $scope.chatState.history.push(logChatData);
                        $scope.listMessage.push(logChatData);
                        saveChatStateToStorage();
                    }
                    $scope.uploading = false;
                    $scope.$digest();
                    $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
                    break;
                case RECEIVE_FILE:
                    var logChatData = new Message(data.fromFullname, 4, "");
                    logChatData.fileName = data.fileName;
                    logChatData.url = data.url;
                    if (isImageLink(data.fileName)) {
                        logChatData.isImage = 1;
                    }
                    if (!$scope.maximize) {
                        $scope.newMessage++;
                    }
                    $scope.chatState.history.push(logChatData);
                    $scope.listMessage.push(logChatData);
                    saveChatStateToStorage();
                    $scope.$digest();
                    $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
                    break;
                case LEAVE_CONVERSATION:
                    if (data.conversationId == $scope.chatState.conversation_id) {
                        $scope.chatState.conversation_id = "-1";
                        $scope.chatState.agent_name = null;
                        var mes = $filter('translate')('LBL_CHAT_ENDED');
                        var logChatData = new Message(null, 3, mes);
                        $scope.listMessage.push(logChatData);
                        $scope.isRating = false;
                        $scope.allowRating = false;
                        $scope.isLike = false;
                        $scope.isDislike = false;
                        $scope.chatState.isLike = false;
                        $scope.chatState.isDislike = false;
                        $scope.chatState.replyFromTrigger = 0;
                        $scope.commentMessage.content = "";
                        $scope.agentName = $scope.agentNameDefault;
                        $scope.agentDescription = $scope.agentDescriptionDefault;
                        $scope.avatar = $scope.agentAvatarDefault;
                    }
                    clearTimeout($scope.tmroutCheckAgentStat);
                    $scope.tmroutCheckAgentStat = setTimeout(function () {
                        restoreChatState();
                    }, checkStatTmrDuration);
                    $scope.$digest();
                    $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
                    break;
                case CUSTOMER_SEND_OFFLINE_MESSAGE:
                    if (data.r == 1) {
                        $scope.sentNotify = true;
                    } else {
                        $scope.sendOfflineError = true;
                    }
                    $scope.isSendOffline = false;
                    $scope.$digest();
                    break;
                case NOTIFY_TYPING:
                    $scope.isTyping = true;
                    timeoutTyping = setTimeout(function () {
                        $scope.isTyping = false;
                        $scope.$digest();
                    }, 15000);
                    $scope.$digest();
                    $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
                    break;
                case NOTIFY_STOP_TYPING:
                    $scope.isTyping = false;
                    clearTimeout(timeoutTyping);
                    $scope.$digest();
                    $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
                    break;
                case AGENT_START_CHAT_WITH_CUSTOMER:
                    if ($scope.chatState.agent_name != data.fullName) {
                        $scope.chatState.conversation_id = data.conversationId;
                        $scope.chatState.agent_name = data.fullName;
                        $scope.chatState.agent_group = data.serviceName;
                        $scope.chatState.service_id = data.serviceId;
                        $scope.chatState.chatting = true;
                        $scope.agentName = data.fullName;
                        $scope.agentDescription = data.serviceName;
                        $scope.avatar = data.avatar ? data.avatar : $scope.agentAvatarDefault;
                        mes = data.fullName + $filter('translate')('LBL_JOIN_CHAT');
                        var logChatData = new Message(null, 3, mes);
                        $scope.chatState.history.push(logChatData);
                        $scope.listMessage.push(logChatData);
                        //$scope.listMessage.push(msg);
                        saveChatStateToStorage();
                        $scope.allowRating = true;
                        $scope.isChatting = true;
                        $scope.listService = [];
                        if ($scope.login.username != "") {
                            $scope.isSignin = true;
                        }
                        $scope.openChatBox();
                        $scope.$digest();
                        $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
                    } else {
                        $scope.avatar = data.avatar;
                    }
                    clearTimeout($scope.tmroutCheckAgentStat);

                    break;


            }
        }

        function sessionLogout() {
            $scope.chatState.agent_name = '';
            $scope.chatState.agent_group = '';
            if ($scope.listService.length == 1) {
            } else {
                $scope.chatState.service_id = -1;
            }
            $scope.chatState.isLike = false;
            $scope.chatState.isDislike = false;
            $scope.sendOfflineError = false;
            if ($scope.chatState.visitor_name != null && $scope.chatState.visitor_name != "") {
                // $scope.visitorName = $scope.chatState.visitor_name == null ? "" : $scope.chatState.visitor_name;
                // $scope.visitorEmail = $scope.chatState.visitor_email == null ? "" : $scope.chatState.visitor_email;
                // $scope.visitorPhone = $scope.chatState.visitor_phone == null ? "" : $scope.chatState.visitor_phone;
                $scope.visitorInfo.setBasicInfo($scope.chatState.visitor_name, $scope.chatState.visitor_email, $scope.chatState.visitor_phone);
            } else {
                // $scope.visitorName = parentUsername;
                // $scope.visitorEmail = parentEmail;
                // $scope.visitorPhone = parentPhone;
                $scope.visitorInfo.setBasicInfo(parentUsername, parentEmail, parentPhone);
            }
            // $scope.login.username = $scope.visitorName;
            // $scope.login.email = $scope.visitorEmail;
            // $scope.login.phone = $scope.visitorPhone;
            $scope.login.setBasicInfo($scope.visitorInfo.visitorName, $scope.visitorInfo.visitorEmail, $scope.visitorInfo.visitorPhone);
            $scope.login.setAdditionFields($scope.lstAdditionField, $scope.chatState.visitorAdditionField);
            $scope.chatState.conversation_id = "-1";
            $scope.chatState.replyFromTrigger = 0;
            $scope.chatState.history = new Array();
            $scope.listMessage = new Array();
            $scope.agentName = $scope.agentNameDefault;
            $scope.agentDescription = $scope.agentDescriptionDefault;
            $scope.avatar = $scope.agentAvatarDefault;
            $scope.isChatting = false;
            $scope.isSignin = false;
            if ($scope.chatState.triggerState && $scope.chatState.triggerState.length > 0) {
                for (var i = 0; i < $scope.lstTrigger.length; i++) {
                    for (var j = 0; j < $scope.chatState.triggerState.length; j++) {
                        if ($scope.chatState.triggerState[j].id == $scope.lstTrigger[i].id && $scope.lstTrigger[i].fire_once != 1) {
                            $scope.chatState.triggerState.splice(j, 1);
                            break;
                        }
                    }
                }
            }


        }

        function restoreChatBox() {
            $scope.isChatting = true;
            if ($scope.chatState.chat_windows_maximum === true) {
                notifyNewMessage("openChatBox");
                $scope.maximize = true;
            } else {
                if (hidePopup) {
                    if ($scope.isChatting) {
                        notifyNewMessage("closeChatBox");
                    } else {
                        notifyNewMessage("closeChatBoxHide");
                    }
                } else {
                    notifyNewMessage("closeChatBox");
                }
                $scope.maximize = false;
            }

            $scope.sendOfflineError = false;
            if ($scope.chatState.agent_name == "") {
                $scope.agentName = $scope.agentNameDefault;
                $scope.agentDescription = $scope.agentDescriptionDefault;
                $scope.avatar = $scope.agentAvatarDefault;
            } else {
                $scope.agentName = $scope.chatState.agent_name;
                $scope.agentDescription = $scope.chatState.agent_group;
                $scope.avatar = $scope.chatState.agent_avatar ? $scope.chatState.agent_avatar : $scope.agentAvatarDefault;
                $scope.allowRating = true;
            }
            if ($scope.chatState.visitor_name !== "") {
                $scope.isSignin = true;
                // $scope.visitorName = $scope.chatState.visitor_name == null ? "" : $scope.chatState.visitor_name;
                // $scope.visitorEmail = $scope.chatState.visitor_email == null ? "" : $scope.chatState.visitor_email;
                // $scope.visitorPhone = $scope.chatState.visitor_phone == null ? "" : $scope.chatState.visitor_phone;
                $scope.visitorInfo.setBasicInfo($scope.chatState.visitor_name, $scope.chatState.visitor_email, $scope.chatState.visitor_phone)
                $scope.login.setBasicInfo($scope.chatState.visitor_name, $scope.chatState.visitor_email, $scope.chatState.visitor_phone)
                $scope.login.setAdditionFields($scope.lstAdditionField, $scope.chatState.visitorAdditionField);

                $scope.userInfo.setBasicInfo($scope.chatState.visitor_name, $scope.chatState.visitor_email, $scope.chatState.visitor_phone)
                $scope.userInfo.setAdditionFields($scope.lstAdditionField, $scope.chatState.visitorAdditionField);

                // $scope.userInfo.username = $scope.visitorName;
                // $scope.userInfo.email = $scope.visitorEmail;
                // $scope.userInfo.phone = $scope.visitorPhone;
                $scope.isLike = $scope.chatState.isLike;
                $scope.isDislike = $scope.chatState.isDislike;
            } else {
                $scope.isSignin = false;
            }
        }


        function getHostName(url) {
            var match = url.match(/:\/\/(www[0-9]?\.)?(.[^/:]+)/i);
            if (match != null && match.length > 2 && typeof match[2] === 'string' && match[2].length > 0) {
                return match[2];
            } else {
                return null;
            }
        }

        function setCookie(name, value, days) {
            var expires;
            if (days) {
                var date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = ";expires=" + date.toUTCString();
            } else {
                expires = "";
            }
            document.cookie = name + "=" + value + expires + ";path=/";
        }

        function getCookie(cname) {
            var name = cname + "=";
            var decodedCookie = decodeURIComponent(document.cookie);
            var ca = decodedCookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name) == 0) {
                    return c.substring(name.length, c.length);
                }
            }
            return "";
        }

        function isImageLink(url) {
            var regex = /\.(jpg|jpeg|tiff|gif|png)$/;
            return regex.test(url.split("?")[0].toLowerCase());
        }

        function requestFirstLogin() {
            if (isFirstLogin === false) {

                log("-------------------------------request login first time-------------------------------");
                var chatState;
                if (localStorage.getItem("chatState_" + $scope.domainId) != null) {
                    chatState = JSON.parse(localStorage.getItem("chatState_" + $scope.domainId));
                } else {
                    chatState = $scope.chatState;
                }
                var response = new $.jqx.response();
                var os = response.os;
                var browser = response.browser;
                var device = response.device;
                var host = document.location.host;
                if (parent !== window) {
                    host = document.referrer;
                }
                var requestLogin = {
                    visitorId: chatState.visitor_id,
                    ip: userIp,
                    country_name: city,
                    host: getHostName(host),
                    //os: '',
                    //browser: navigator.userAgent,
                    //device_type: 'Web',
                    domain: $scope.domainCode,
                    os: os.name + " " + os.version + " " + os.platform,
                    browser: browser.name + " " + browser.version,
                    device_type: device.type,
                    accountId: $scope.accountId

                };

                send(CUSTOMER_LOGIN, requestLogin);

                if ($scope.login.username || $scope.login.email || $scope.login.phone) {
                    var infoVisitor = new InfoVisitor();
                    infoVisitor.setBasicInfo($scope.login.username, $scope.login.email, $scope.login.phone)
                    infoVisitor.setAdditionInfo($scope.lstAdditionField, $scope.chatState.visitorAdditionField);

                    // var infoVisitor = {
                    //     name: $scope.login.username ? $scope.login.username : "",
                    //     email: $scope.login.email ? $scope.login.email : "",
                    //     phone: $scope.login.phone ? $scope.login.phone : ""
                    // };
                    $scope.visitorInfo.setBasicInfo($scope.login.username, $scope.login.email, $scope.login.phone);
                    // $scope.visitorName = $scope.login.username;
                    // $scope.visitorEmail = $scope.login.email;
                    // $scope.visitorPhone = $scope.login.phone;
                    send(UPDATE_VISITOR_INFO, infoVisitor);
                }


                var url = {
                    url: host,
                    title: $scope.pageTitle ? $scope.pageTitle : null,
                    referrer: $scope.referrer ? $scope.referrer : null
                }
                send(VISITOR_VISIT_PATH_URL, url);
            }
        }

        function notifyNewMessage(action) {
            var data = {
                id: 6,
                type: action
            }
            parent.postMessage(JSON.stringify(data), "*");
            parent.postMessage(action, "*");
        }

        $scope.doTriggerAction = function (trigger) {
            $scope.chatState.triggerState.push({ id: trigger.id, state: 'fired' });
            saveChatStateToStorage();

            switch (trigger.action) {
                case 0:

                    if ($scope.isChatting && $scope.isCustomerChatting == true) {
                        log('visitor is chatting with agent, close');
                        break;
                    }
                    if ($scope.userOpenChatBoxManually && $scope.chatState.replyFromTrigger != 1) {
                        log('visitor open chat first, close');
                        break;
                    }
                    if (!$scope.isMobile) {
                        $scope.openChatBox();
                    } else {
                        if ($scope.maximize != true) {
                            $scope.newMessage++;
                        }
                    }
                    var content = trigger.action_value;
                    var fromName = trigger.action_agent;
                    var senderAgentId = fromName;
                    var msgData = new Message(senderAgentId, 2, content);
                    var logChatData = new Message(senderAgentId, 2, getMessageChat(content));
                    msgData.isTriggerMsg = 1;
                    $scope.chatState.history.push(msgData);
                    $scope.chatState.replyFromTrigger = 1;
                    $scope.listMessage.push(logChatData);
                    $scope.isChatting = true;
                    $scope.$digest();
                    break;
            }
        }

        $scope.changeWidgetType = function (type) {
            var data = {
                id: 6,
                type: 'changeWidgetType',
                value: type
            }
            parent.postMessage(JSON.stringify(data), "*");
            //            parent.postMessage(action, "*");
        }
        $scope.changeWidgetPosition = function (type, viewport) {
            var data = {
                id: 6,
                type: 'changeWidgetPosition',
                viewport: viewport,
                value: type
            }
            parent.postMessage(JSON.stringify(data), "*");
            //            parent.postMessage(action, "*");
        }

        $scope.createTriggerIntvl = function (trigger) {
            triggerIntvl[trigger.id] = setInterval(function () {
                var isFired = $scope.checkTriggerFireState(trigger);
                if (isFired) {
                    log('trigger already fired, close');
                    clearInterval(triggerIntvl[trigger.id]);
                    return;
                }
                var pass = $scope.checkTgCond(trigger);
                if (!pass) {
                    console.error('Checker failed!');
                    clearInterval(triggerIntvl[trigger.id]);
                    return;
                }
                if (pass == 'run') {
                    $scope.doTriggerAction(trigger);
                    log('all condition valid, proceed');
                } else if (pass == 'stop') {
                    clearInterval(triggerIntvl[trigger.id]);
                    log('None of condition are matched, stop the interval');
                } else {
                    log('Waiting condition to match');
                }
            }, 1000);
        }

        $scope.checkTriggerFireState = function (trigger) {
            var isFired = false;
            for (var i = 0; i < $scope.chatState.triggerState.length; i++) {
                if (trigger.id == $scope.chatState.triggerState[i].id) {
                    isFired = true;
                }
            }
            return isFired;
        }
        $scope.prepareTrigger = function (index) {
            setTimeout(function () {
                if ($scope.lstTrigger[index].needInterval) {
                    log('Trigger has a condition that need interval, creating....');
                    $scope.createTriggerIntvl($scope.lstTrigger[index]);
                } else if ($scope.checkTgCond($scope.lstTrigger[index]) == 'run') {
                    log('Trigger not has a condition that need interval, fire...');
                    $scope.doTriggerAction($scope.lstTrigger[index]);
                } else {
                    log('trigger not fired');
                }
            }, $scope.lstTrigger[index].fire_delay * 1000); //seconds
        }
        $scope.fireTrigger = function (runTime) {
            for (var i = 0; i < $scope.lstTrigger.length; i++) {
                var isFired = $scope.checkTriggerFireState($scope.lstTrigger[i]);
                if ($scope.lstTrigger[i].run_time == runTime && !isFired) {
                    $scope.prepareTrigger(i);
                } else {
                    log('already fired');
                }
            }
        }

        $scope.checkTgCond = function (trigger) {
            var conditions = trigger.conditions;
            var condRsArr = [];
            var isPassed = false;
            var timeonsite = {};
            try {
                for (var i = 0; i < conditions.length; i++) {
                    var realVal = $scope.getCondRealValue(conditions[i], trigger);
                    var configVal = conditions[i].value;
                    if (conditions[i].field == 'visitor_time_on_site' || conditions[i].field == 'visitor_time_on_page') {
                        timeonsite = {
                            field: conditions[i].field,
                            check: comparer[conditions[i].operator](realVal, configVal)
                        };
                        if ((conditions[i].operator == 'equal' || conditions[i].operator == 'less' || conditions[i].operator == 'less_or_equal') && realVal > configVal) {
                            timeonsite = {
                                field: conditions[i].field,
                                check: comparer[conditions[i].operator](realVal, configVal),
                                forceStop: true
                            };
                        }
                        //                        if (conditions[i].field == 'visitor_time_on_site' conditions[i].operator == 'less' && realVal > configVal) {
                        //                            
                        //                        }
                        condRsArr.push(timeonsite);
                    } else {
                        condRsArr.push({
                            field: conditions[i].field,
                            check: comparer[conditions[i].operator](realVal, configVal)
                        });

                    }
                }
                isPassed = operatorsCheck[trigger.condition_operator == 1 ? 'or' : 'and'](condRsArr);
                //                console.log(condRsArr);
            } catch (e) {
                console.error(e);
            }
            return isPassed;
        }

        var comparer = {
            'equal': function (a, b) {
                return a == b;
            },
            'not_equal': function (a, b) {
                return a != b;
            },
            'contains': function (a, b) {
                if (!a) {
                    return false;
                }
                if (typeof b === 'string') {
                    b = b.toLowerCase();
                }
                if (typeof a === 'string') {
                    a = a.toLowerCase();
                }
                return a && a.indexOf(b) >= 0;
            },
            'not_contains': function (a, b) {
                if (!a) {
                    return false;
                }
                if (typeof b === 'string') {
                    b = b.toLowerCase();
                }
                if (typeof a === 'string') {
                    a = a.toLowerCase();
                }
                return a && a.indexOf(b) == -1;
            },
            'greater': function (a, b) {
                return a > b;
            },
            'less': function (a, b) {
                return a < b;
            },
            'greater_or_equal': function (a, b) {
                return a >= b;
            },
            'less_or_equal': function (a, b) {
                return a <= b;
            },
        }

        var operatorsCheck = {
            'and': function (condRsArr) {
                var state = 'run';
                for (var i = 0; i < condRsArr.length; i++) {
                    if (condRsArr[i].field != 'visitor_time_on_site' && condRsArr[i].field != 'visitor_time_on_page' && condRsArr[i].check == false) {
                        state = 'stop';
                        break;
                    } else if ((condRsArr[i].field == 'visitor_time_on_site' || condRsArr[i].field == 'visitor_time_on_page') && condRsArr[i].check == false) {
                        state = 'retry';
                        if (condRsArr[i].forceStop) {
                            state = 'stop';
                        }
                        break;
                    }
                }
                return state;
            },
            'or': function (condRsArr) {
                var state = 'stop';
                for (var i = 0; i < condRsArr.length; i++) {
                    if (condRsArr[i].check == true) {
                        state = 'run';
                        break;
                    }
                }
                return state;
            },
        };

        $scope.getCondRealValue = function (cond, trigger) {
            var retVal;
            switch (cond.field) {
                case 'hour_of_day':
                    var now = new Date();
                    retVal = now.getHours();
                    break;
                case 'day_of_week':
                    retVal = new Date().getDay() + 1;
                    break;
                case 'day_of_month':
                    retVal = new Date().getDate();
                    break;
                case 'visitor_time_on_page':
                    retVal = (new Date().getTime() / 1000 | 0) - $scope.currentTimeOnSite;
                    break;
                case 'visitor_time_on_site':
                    var timeonsite = sessionStorage.getItem('cs_landingtime');
                    retVal = (new Date().getTime() / 1000 | 0) - timeonsite;
                    break;
                case 'visitor_page_url':
                    var host = document.location.host;
                    if (parent !== window) {
                        host = document.referrer;
                    }
                    retVal = host;
                    break;
                case 'visitor_page_title':
                    retVal = $scope.pageTitle;
                    break;
                case 'referrer':
                    retVal = $scope.referrer;
                    break;
                case 'visitor_name':
                    retVal = $scope.visitorInfo.visitorName;
                    break;
                case 'visitor_email':
                    retVal = $scope.visitorInfo.visitorEmail;
                    break;
                case 'visitor_phone':
                    retVal = $scope.visitorInfo.visitorPhone;
                    break;
                case 'visitor_user_agent':
                    retVal = navigator.userAgent;
                    break;
                case 'visitor_browser':
                    retVal = $scope.browserInfo.browser.name;
                    break;
                case 'visitor_platform':
                    retVal = $scope.browserInfo.os.name;
                    break;
                case 'visitor_ip':
                    retVal = $scope.clientIp;
                    break;
                case 'visitor_device':
                    retVal = $scope.browserInfo.device.type;
                    break;
            }
            return retVal;
        }

        function displayMessage(evt) {
            evt = JSON.parse(evt.data);
            if (evt.id == 1) {
                $scope.openChatBox();
            }
            if (evt.id == 2) {
                $('.chat-area').scrollTop($(".chat-area").prop("scrollHeight"));
            }
            if (evt.id == 3) {
                if (evt.value.chatState) {
                    localStorage.setItem("chatState_" + domainId, evt.value.chatState);
                }
                if (evt.value.deviceKey) {
                    localStorage.setItem("chatState_devicekey_" + domainId, evt.value.deviceKey);
                }
            }
            $scope.$digest();
        }

        if (window.addEventListener) {
            // For standards-compliant web browsers
            window.addEventListener("message", displayMessage, false);
        } else {
            window.attachEvent("onmessage", displayMessage);
        }
    }]);
